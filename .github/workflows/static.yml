# Simple workflow for deploying static content to GitHub Pages
name: Deploy NoiseCapture as a static website

on:
  # Runs on pushes targeting the default branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false


env:
  MAIN_BRANCH: ${{ github.ref == 'refs/heads/main' }}

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - uses: gradle/wrapper-validation-action@v1
      - uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: ${{ env.MAIN_BRANCH != 'true' }}
      - name: Cache
        uses: actions/cache@v4
        with:
          key: noisecapturejs
          path: |
            build/js
            composeApp/build/dist/wasmJs
      - name: Build
        run: >
          ./gradlew wasmJsBrowserDistribution
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload js dist
          path: 'composeApp/build/dist/wasmJs/productionExecutable'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Clean
        run: rm -f $HOME/.gradle/caches/modules-2/modules-2.lock
